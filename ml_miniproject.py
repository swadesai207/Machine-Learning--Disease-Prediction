# -*- coding: utf-8 -*-
"""ML_MINIPROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fRFsv1dukUquSNX221u-dFcZj2CbMRDE
"""

#import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix,f1_score

#load dataset
data = pd.read_csv('/content/ml_final.csv', encoding='latin1')

# Split data into symptoms (X) and target disease (y)
X = data.drop(['Disease', 'REMEDY'], axis=1)
y = data['Disease']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.0606)

# Initialize classifiers
random_forest = RandomForestClassifier()
decision_tree = DecisionTreeClassifier()
naive_bayes = GaussianNB()

# Train the classifiers
random_forest.fit(X_train, y_train)
decision_tree.fit(X_train, y_train)
naive_bayes.fit(X_train, y_train)

# Make predictions using each classifier on the testing set
predicted_disease_rf = random_forest.predict(X_test)
predicted_disease_dt = decision_tree.predict(X_test)
predicted_disease_nb = naive_bayes.predict(X_test)

print("Actual output:", y_test)
print("Predicted Disease (Random Forest):", predicted_disease_rf)
print("Predicted Disease (Decision Tree):", predicted_disease_dt)
print("Predicted Disease (Naive Bayes):", predicted_disease_nb)

# Calculate accuracy for each model
accuracy_rf = accuracy_score(y_test, predicted_disease_rf)
accuracy_dt = accuracy_score(y_test, predicted_disease_dt)
accuracy_nb = accuracy_score(y_test, predicted_disease_nb)

# Display the accuracy of each model
print("Accuracy (Random Forest):", accuracy_rf)
print("Accuracy (Decision Tree):", accuracy_dt)
print("Accuracy (Naive Bayes):", accuracy_nb)

# Model Comparison Plot
plt.figure(figsize=(10, 6))
sns.barplot(x=['Random Forest', 'Decision Tree', 'Naive Bayes'], y=[accuracy_rf, accuracy_dt, accuracy_nb], saturation=0.1)
plt.title('Model Comparison')
plt.ylabel('Accuracy')
plt.ylim(0, 1)
plt.show()


# Confusion Matrix
plt.figure(figsize=(10, 6))
sns.heatmap(confusion_matrix(y_test, predicted_disease_rf), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix (Random Forest)')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Feature Importance Plot for Random Forest
plt.figure(figsize=(10, 6))
importances = random_forest.feature_importances_
indices = range(len(X.columns))
plt.bar(indices, importances, color='b', align='center')
plt.xlabel('Symptoms')
plt.ylabel('Importance')
plt.title('Feature Importance (Random Forest)')
plt.xticks(indices, X.columns, rotation='vertical')
plt.show()